{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://@ivamuno/cypress-api-coverage/./src/utils/StringUtils.ts","webpack://@ivamuno/cypress-api-coverage/./src/commands.ts"],"sourcesContent":["export class StringUtils {\n  public static isString(value: unknown): value is string {\n    return typeof value === 'string';\n  }\n\n  public static toRegexSource(pattern: RegExp | string): string {\n    return this.isString(pattern) ? pattern : pattern.source;\n  }\n\n  public static toRegex(pattern: RegExp | string): RegExp {\n    return this.isString(pattern) ? new RegExp(pattern) : pattern;\n  }\n\n  public static dirname(path: string): string {\n    const normalizedPath = this.removeTrailingSlash(path);\n    const fileNameIdx = this.fileNameIdx(normalizedPath);\n    const dirname = normalizedPath.substring(0, fileNameIdx);\n\n    return this.removeTrailingSlash(dirname);\n  }\n\n  public static normalizeName(\n    path: string,\n    options?: { ext?: string }\n  ): string {\n    const fileNameIdx = this.fileNameIdx(path);\n    const name = this.removeLeadingSlash(path.substring(fileNameIdx));\n\n    const extIdx = name.lastIndexOf('.');\n\n    let ext: string | undefined;\n    let nameWithoutExt = name;\n\n    if (extIdx >= 0) {\n      ext = options?.ext ?? name.substring(extIdx);\n      nameWithoutExt = name.substring(0, extIdx);\n    }\n\n    return `${nameWithoutExt}${ext ?? '.har'}`;\n  }\n\n  public static escapeCharacters(\n    str: string,\n    chars: string = '^[]{}()\\\\\\\\.$*+?|'\n  ): string {\n    let foundChar = false;\n\n    const length = chars.length;\n\n    for (let i = 0; i < length; ++i) {\n      if (str.indexOf(chars.charAt(i)) !== -1) {\n        foundChar = true;\n        break;\n      }\n    }\n\n    if (!foundChar) {\n      return str;\n    }\n\n    let result = '';\n\n    for (let j = 0; j < str.length; ++j) {\n      if (chars.indexOf(str.charAt(j)) !== -1) {\n        result += '\\\\';\n      }\n\n      result += str.charAt(j);\n    }\n\n    return result;\n  }\n\n  private static fileNameIdx(path: string): number {\n    return path.indexOf('\\\\') >= 0\n      ? path.lastIndexOf('\\\\')\n      : path.lastIndexOf('/');\n  }\n\n  private static removeLeadingSlash(path: string): string {\n    return path.replace(/^\\/|^\\\\/, '');\n  }\n\n  private static removeTrailingSlash(path: string): string {\n    return path.replace(/\\/+$|\\\\+$/, '');\n  }\n}","import { ComputeCoverageOptions, RecordOptions, SaveOptions } from \"./index2\";\nimport { StringUtils } from \"./utils/StringUtils\";\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable<Subject> {\n      recordApiRequests(options?: Partial<RecordOptions>): Cypress.Chainable<Subject>;\n      saveApiRequests(options?: Partial<SaveOptions>): Cypress.Chainable<Subject>;\n      computeCoverage(options?: Partial<ComputeCoverageOptions>): Cypress.Chainable<Subject>;\n    }\n  }\n}\n\nlet requestsLog: Array<any> = [];\nCypress.Commands.add(\n  'recordApiRequests',\n  (options?: Partial<RecordOptions>): Cypress.Chainable =>\n    cy.task('recordHar', {\n      content: false,\n      includeBlobs: false,\n      rootDir: StringUtils.dirname(Cypress.spec.absolute),\n      ...options,\n      excludePaths: options?.excludePaths?.map(x =>\n        StringUtils.toRegexSource(x)\n      ),\n      includeHosts: options?.includeHosts?.map(x =>\n        StringUtils.toRegexSource(x)\n      )\n    })\n);\n\nCypress.Commands.add(\n  'saveApiRequests',\n  (options?: Partial<SaveOptions>): Cypress.Chainable => {\n    const fallbackFileName = Cypress.spec.name;\n    const outDir = (Cypress.env('hars_folders') as string) ?? './';\n    const log = {\n      log: {\n        version: \"1.2\",\n        pages: [],\n        creator: {\n          name: \"@ivamuno/cypress-api-coverage\",\n          version: \"1.0.0\",\n          comment: \"https://github.com/ivamuno/cypress-api-coverage#readme\"\n        },\n        entries: requestsLog\n      }\n    };\n\n    requestsLog = [];\n    cy.task('saveHar', {\n      outDir,\n      ...options,\n      fileName: StringUtils.normalizeName(\n        options?.fileName ?? fallbackFileName,\n        !options?.fileName ? { ext: '.har' } : undefined\n      )\n    });\n    return cy.task('saveApiRequestsTask', {\n      log,\n      outDir,\n      ...options,\n      fileName: StringUtils.normalizeName(\n        options?.fileName ?? fallbackFileName,\n        !options?.fileName ? { ext: '.api.har' } : undefined\n      )\n    });\n  }\n);\n\nCypress.Commands.overwrite(\"request\", (originalFn, ...args) => {\n  let requestDetails : {url?: string | undefined, method?: string | undefined} = { };\n  if(typeof args[0] === \"object\") {\n    requestDetails = { url: args[0].url, method: args[0].method };\n  } else {\n    const unknownArgs = args as unknown as Array<any>;\n    if(unknownArgs.length == 2) {\n      requestDetails = { url: unknownArgs[0], method: 'GET' };\n    } else if(unknownArgs.length == 3) {\n      requestDetails = { url: unknownArgs[1], method: unknownArgs[0] };\n    }\n  }\n\n  const startedDateTime = Date.now();\n  return originalFn(...args).then((response) => {\n    const requestEndTime = Date.now();\n\n    requestsLog.push({\n      startedDateTime,\n      time: requestEndTime - startedDateTime,\n      request: {\n        method: requestDetails.method || \"GET\",\n        url: requestDetails.url\n      },\n      response: {\n        status: response.status,\n        statusText: response.statusText\n      }\n    });\n\n    return response;\n  });\n});\n\nCypress.Commands.add(\n  'computeCoverage',\n  (options?: Partial<ComputeCoverageOptions>): Cypress.Chainable => {\n    const outDir = (Cypress.env('hars_folders') as string) ?? './';\n    return cy.task('computeCoverageTask', {\n      rootDir: outDir,\n      ...options,\n      includeHosts: options?.includeHosts?.map(x =>\n        StringUtils.toRegexSource(x)\n      )\n    })\n  }\n);\n"],"names":["StringUtils","isString","value","toRegexSource","pattern","this","source","toRegex","RegExp","dirname","path","normalizedPath","removeTrailingSlash","fileNameIdx","substring","normalizeName","options","name","removeLeadingSlash","extIdx","lastIndexOf","ext","nameWithoutExt","escapeCharacters","str","chars","foundChar","length","i","indexOf","charAt","result","j","replace","requestsLog","Cypress","Commands","add","cy","task","content","includeBlobs","rootDir","spec","absolute","excludePaths","map","x","includeHosts","fallbackFileName","outDir","env","log","version","pages","creator","comment","entries","fileName","undefined","overwrite","originalFn","args","requestDetails","url","method","unknownArgs","startedDateTime","Date","now","then","response","requestEndTime","push","time","request","status","statusText"],"sourceRoot":""}